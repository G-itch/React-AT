{"ast":null,"code":"class FetchData {\n  static async getUsers() {\n    try {\n      console.log('Fazendo requisição para:', `${this.baseURL}/users`);\n\n      // Adicionar timeout de 10 segundos\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n      const response = await fetch(`${this.baseURL}/users`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      console.log('Resposta recebida:', response.status, response.statusText);\n      if (!response.ok) {\n        throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Dados recebidos:', data.length, 'usuários');\n      return data;\n    } catch (error) {\n      console.error('Erro detalhado ao buscar usuários:', error);\n      if (error.name === 'AbortError') {\n        console.log('Timeout na requisição, usando dados mock...');\n      }\n\n      // Fallback com dados mock em caso de erro\n      console.log('Usando dados mock como fallback...');\n      return [{\n        id: 1,\n        name: \"João Silva\",\n        email: \"joao@email.com\",\n        phone: \"(11) 99999-9999\",\n        company: {\n          name: \"Tech Corp\",\n          catchPhrase: \"Inovação em tecnologia\"\n        }\n      }, {\n        id: 2,\n        name: \"Maria Santos\",\n        email: \"maria@email.com\",\n        phone: \"(11) 88888-8888\",\n        company: {\n          name: \"Digital Solutions\",\n          catchPhrase: \"Soluções digitais para o futuro\"\n        }\n      }];\n    }\n  }\n  static async getPostsByUserId(userId) {\n    try {\n      const response = await fetch(`${this.baseURL}/posts/?userId=${userId}`);\n      if (!response.ok) {\n        throw new Error(`Erro ao buscar posts: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Erro ao buscar posts:', error);\n      throw error;\n    }\n  }\n  static async getCommentsByPostId(postId) {\n    try {\n      const response = await fetch(`${this.baseURL}/comments?postId=${postId}`);\n      if (!response.ok) {\n        throw new Error(`Erro ao buscar comentários: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Erro ao buscar comentários:', error);\n      throw error;\n    }\n  }\n}\nFetchData.baseURL = 'https://jsonplaceholder.typicode.com';\nexport default FetchData;","map":{"version":3,"names":["FetchData","getUsers","console","log","baseURL","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","clearTimeout","status","statusText","ok","Error","data","json","length","error","name","id","email","phone","company","catchPhrase","getPostsByUserId","userId","getCommentsByPostId","postId"],"sources":["C:/Users/enfur/AT/src/services/FetchData.js"],"sourcesContent":["class FetchData {\r\n  static baseURL = 'https://jsonplaceholder.typicode.com';\r\n\r\n  static async getUsers() {\r\n    try {\r\n      console.log('Fazendo requisição para:', `${this.baseURL}/users`);\r\n      \r\n      // Adicionar timeout de 10 segundos\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\r\n      \r\n      const response = await fetch(`${this.baseURL}/users`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      console.log('Resposta recebida:', response.status, response.statusText);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('Dados recebidos:', data.length, 'usuários');\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Erro detalhado ao buscar usuários:', error);\r\n      \r\n      if (error.name === 'AbortError') {\r\n        console.log('Timeout na requisição, usando dados mock...');\r\n      }\r\n      \r\n      // Fallback com dados mock em caso de erro\r\n      console.log('Usando dados mock como fallback...');\r\n      return [\r\n        {\r\n          id: 1,\r\n          name: \"João Silva\",\r\n          email: \"joao@email.com\",\r\n          phone: \"(11) 99999-9999\",\r\n          company: {\r\n            name: \"Tech Corp\",\r\n            catchPhrase: \"Inovação em tecnologia\"\r\n          }\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Maria Santos\",\r\n          email: \"maria@email.com\", \r\n          phone: \"(11) 88888-8888\",\r\n          company: {\r\n            name: \"Digital Solutions\",\r\n            catchPhrase: \"Soluções digitais para o futuro\"\r\n          }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  static async getPostsByUserId(userId) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/posts/?userId=${userId}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Erro ao buscar posts: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar posts:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getCommentsByPostId(postId) {\r\n    try {\r\n      const response = await fetch(`${this.baseURL}/comments?postId=${postId}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Erro ao buscar comentários: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar comentários:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FetchData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}